swagger: "2.0"
info:
  title: BooksList
  version: 1.0.0

paths:
  /api/books:
    get:
      tags:
        - Book
      summary: Get a list of all books
      responses:
        200:
          description: A list of books
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Book'
    post:
      tags:
        - Book
      summary: Add a new book
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/Book'
      responses:
        201:
          description: The added book
          schema:
            $ref: '#/components/schemas/Book'
        400:
          description: Invalid input data

  /api/books/{book_id}:
    get:
      tags:
        - Book
      summary: Get details of a specific book
      parameters:
        - in: path
          name: book_id
          required: true
          type: integer
          description: The ID of the book to retrieve.
      responses:
        200:
          description: Book details successfully retrieved.
          schema:
            $ref: '#/components/schemas/Book'
        404:
          description: Book not found.
          schema:
            properties:
              message:
                type: string
                example: Book not found.
    put:
      tags:
        - Book
      summary: Update details of a specific book
      parameters:
        - in: path
          name: book_id
          required: true
          type: integer
          description: The ID of the book to update
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The updated book
          schema:
            $ref: '#/components/schemas/Book'
        400:
          description: Invalid input data
        404:
          description: Book not found
    delete:
      tags:
        - Book
      summary: Delete a specific book
      parameters:
        - in: path
          name: book_id
          required: true
          type: integer
          description: The ID of the book to delete
      responses:
        200:
          description: Book successfully deleted
        404:
          description: Book not found

  /api/authors:
    post:
      tags:
        - Author
      summary: Add a new author
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/components/schemas/Author"
      responses:
        '201':
          description: Author successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        '400':
          description: Bad request

  /api/authors/{author_id}:
    get:
      tags:
        - Author
      summary: Get author by ID
      parameters:
        - name: author_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: ID of the author
      responses:
        '200':
          description: Author details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        '404':
          description: Author not found
    delete:
      tags:
        - Author
      summary: Delete author by ID
      parameters:
        - name: author_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: ID of the author
      responses:
        '200':
          description: Author successfully deleted
        '404':
          description: Author not found

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author_id:
          type: integer
      required:
        - title
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
        - name
